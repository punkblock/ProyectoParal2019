#include <stdio.h>
#include <string.h>
#include <iostream>
#include <xlnt/xlnt.hpp>
#include "xlsxwriter.h"

using namespace std;

//Se devine variable global con arreglo de salas lleno
string edificio_y_numSala[500];

void leer(char *argumento){
    xlnt::workbook wb;
    wb.load(argumento); //Cargar archivo.xlsx a leer
    auto ws = wb.active_sheet();

    /* Lee toda la hoja de cálculo */
    vector<vector<string>> hoja_calculo; //Creando un vector para hoja de cálculo
    for (auto row : ws.rows(false)){
        vector<string> fila_simple; //Creando un vector nuevo solo para esta fila en la hoja de cálculo
            for (auto cell : row){
  	        fila_simple.push_back(cell.to_string());  //Añadiendo esta celda a la fila;
            }
  	    hoja_calculo.push_back(fila_simple); //Agregando esta fila completa al vector que almacena toda la hoja de cálculo;
    }

    // Definimos variables y vectores a utilizar
    string nombre_edificio; // Nombre del edificio
    string nombreNumero; // Numero de sala
    //int numeros[500];
    string nombree; // variable para agregar eñ nombre de edificio y numero de sala
    string nombre_llenado[500]; //Vector para agregar nombre de edificio
    string numeros_salas[500]; //Vector para agregar numero de salas

    // Primer For para recorrer el archivo completo
    for (int fila = 1; fila < hoja_calculo.size(); fila++){
        nombre_edificio = hoja_calculo.at(fila).at(0); // Se guarda nombre el edificio
        nombreNumero = hoja_calculo.at(fila).at(1); // Se guarda el numero de salas
        //numero_sala = stoi(nombreNumero, nullptr); // Se Convierte de string a entero
        numeros_salas[fila] = nombreNumero; // LLenamos vector con numero de salas
        nombre_llenado[fila] = nombre_edificio; // LLenamos vector con nombre de edificios
        nombree = nombre_llenado[fila]+"_"+numeros_salas[fila]; // Unimos nombre de edifico y numero correspondiente
        edificio_y_numSala[fila] = nombree; // LLenamos el vector que definimos como global con el edificio y numero (ej:M1_201..)
    }
}


void crear_hojas(){
    char buffer[500]; //Variable para almacenar nombre de edificio y hoja convertidos a char
    lxw_workbook  *workbook  = workbook_new("Horario.xlsx"); //Crear libro de trabajo con el nombre "Horario"

    //Escribimos el edificio + numero de sala en cada hoja
    for (int i = 1; i<54; i++){ // 54 es la cantidas de salas
        strcpy(buffer,edificio_y_numSala[i].c_str()); //Convierte variable string edificio_y_numSala a char
        lxw_worksheet *worksheet = workbook_add_worksheet(workbook, buffer); //Escribe el nombre en cada hoja

        // Escribir bloques en cada hoja de sala
        string cadena_bloques[8] = {"Bloques","08:00-09:30","09:40-11:10","11:20-12:50","13:00-14:30","14:40-16:10","16:20-17:50","18:00-19:30"};
        char buffer_bloques[500]; //Variable para almacenar los bloques convertidos a char
    	    for (int c = 0; c<8; c++){ // Recorre cadena de bloques
            strcpy(buffer_bloques,cadena_bloques[c].c_str()); //Convierte la cadena de String a char
      	    worksheet_write_string(worksheet,c, 0, buffer_bloques, NULL); //Escribe los bloques en la columa 0 de la hoja
      	    worksheet_set_column(worksheet, c, 0, 12, NULL); //Ajustar ancho de la columna de bloques
    	    }

           // Escribir dias del horario en cada hoja de sala
    	   string cadena[7] = {"Bloques","Lunes","Martes","Miércoles","Jueves","Viernes","Sábado"}; //Cadena con los dias del horario
    	   char buffer_cadena[500]; //Variable para almacenar los dias convertidos a char
    	   for (int p = 0; p<7; p++){ //Recorre cadena con los dias
     	       //cout << cadena[p] << endl;	
      	       strcpy(buffer_cadena,cadena[p].c_str()); //Convierte la cadena de String a char
      	       worksheet_write_string(worksheet, 0, p, buffer_cadena, NULL); //Escribe los dias en la fila 0 de hoja
    	   }
    }
    workbook_close(workbook);
}

int main(int argc, char *argv[]) {

    //argc: numero total de argumentos pasados por linea de comandos
    //argv: array con los argumentos pasados por linea de comandos

    string argumento;//Variable para guardar el argumento
    //Leyendo los argumentos por argumentos
    for (int i = 0; i < argc; i++)
    {
	argumento = argv[i];

	//Si argumento es igual a -s, se utiliza Salas.xlsx
	if (argumento == "-s")
        {
	    leer(argv[i+1]);
	    crear_hojas();

        }

	//Si argumento es igual a -d, se utiliza Docentes.xlsx
        else if (argumento == "-d")
        {
            
        }

	//Si argumento es igual a -c, se utiliza Cursos.xlsx
	else if(argumento == "-c")
        {

        }
    }
    return 0;
}


